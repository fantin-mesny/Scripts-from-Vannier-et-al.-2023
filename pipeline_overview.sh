### PIPELINE OVERVIEW
# This script cannot be run on its own but provides the whole set of commands (detailed and annotated) used from the pre-processing of RNASeq reads to the generation of figure. Only the differential expression analysis (step 6) is excluded, please refer to the DESeq analysis separately

## 0. PRE-PROCESSING OF RNA-SEQ READS
# For each fastq file, the two following commands were run to trimm the reads (step #0.1), then de-replicate them if needed (step #0.2)
trimmomatic SE -threads 40 reads.fastq trimmed_reads.fastq LEADING:20 TRAILING:20 AVGQUAL:20 HEADCROP:10 MINLEN:130 #0.1
usearch -derep_fulllength trimmed_reads.fasta -fastaout unique_trimmed_reads.fastq -sizeout -threads 40 #0.2

## 1. BUILD SALMON INDEX
# All transcript sequences predicted in the reference genomes used were concatenated in a single file "allCDS.fasta" that was used to build a Salmon index
# This file contains some sequences that are identical, when two species have 100% homology of their orthologs.
salmon index --perfectHash -t allCDS.fasta --keepDuplicates -i index_withdup

## 2. RUN MAPPING
# Pseudo-mapping on the salmon index of each sample's trimmed and dereplicated reads 
salmon quant -i index_withdup --libType A --validateMappings --seqBias --incompatPrior 0.0 -r unique_trimmed_reads.fastq  -o quant_sample > sample.log

## 3. COPY ALL THE SALMON .QF FILES TO A SINGLE DIRECTORY
mkdir ./salmonOutput
for folder in ./quant_*; do
	IFS='_' read -ra SPLIT <<< "$folder"
	cp ./$folder/quant.sf ./salmonOutput/quant_${SPLIT[1]}.sf
done

## 4. REMOVE INTER-SPECIES IDENTICAL GENES
# Remove read counts associated to genes that are identical across different reference genomes (we keep genes that are identical within a single species)
# To do so, we wrote a script using the "duplicate_clusters.tsv" file generated by SALMON when assembling the reference index
mkdir ./salmonOutput_withoutDuplicates
for file in ./salmonOutput/*; do
	python filteringDuplicates.py -dup duplicate_clusters.tsv -which inter -i $file -o ${file}_filtered; 
done

## 5. LINK GENES TO ORTHOGROUPS/KO, AND GET FILES FOR DESEQ
# For each orthogroup, calculate the total number of reads assigned to the genes it contains
# "*_orthogroups.csv" files correspond to Orthogroups.csv output files from OrthoFinder
# "salmonOutput" is provided as a compressed folder "salmonOutput.tar.lrz"
python generateFilesForDESeq.py -i ./salmonOutput -o ./output_OG_bacteria -og2g ./OG/bacteria_orthogroups.csv
python generateFilesForDESeq.py -i ./salmonOutput -o ./output_OG_bacteria_nodup -og2g ./OG/bacteria_orthogroups.csv -ext _filtered # without duplicates (using files finishing by "_filtered")
python generateFilesForDESeq.py -i ./salmonOutput -o ./output_OG_fungi -og2g ./OG/fungi_orthogroups.csv
python generateFilesForDESeq.py -i ./salmonOutput -o ./output_OG_fungi_nodup -og2g ./OG/fungi_orthogroups.csv -ext _filtered # without duplicates (using files finishing by "_filtered")

# For bacteria, the same analysis was also performed on KO families, as annotated by EggNog
python ./KEGG/getKOtable.py # takes as an input all bacterial gene annotations by eggnog (files finishing by ".emapper.annotations")
python generateFilesForDESeq.py -i ./salmonOutput -o ./output_KEGG_bacteria -og2g ./KEGG/KOtable.csv -OGtype ko
python generateFilesForDESeq.py -i ./salmonOutput -o ./output_KEGG_bacteria_nodup -og2g ./KEGG/KOtable.csv  -ext _filtered -OGtype ko
#Generated files from this step were used as inputs for DESeq analyses

## 6. DIFFERENTIAL EXPRESSION ANALYSIS
#See DESeq scripts

## 7. FIGURES
#Calculate abundance of each strain based on number of reads mapped on their genomes
python abundance.py -i ./bacteria_nodup_strain.genes.qf -o ./figure/abundance_roots
#Figure OG
python getFigure_withCountBars.py -ps ./OG/strain_OG/LFC -phy ./SpeciesTree_20bacteria.txt -c ./OG/community_OG_unfiltered_deseq_LFC.csv -ab ./abundance_roots.csv -o ./figure_OG
#Figure KO
python getFigure_withCountBars.py -ps ./KEGG/strain_OG/LFC -phy ./SpeciesTree_20bacteria.txt -c ./KEGG/community_OG_unfiltered_deseq_LFC.csv -ab ./abundance_roots.csv -ann ./KEGG/top200names.xlsx -o ./figure_KEGG